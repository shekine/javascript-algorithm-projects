// Now complete, but still convoluted. See below for slightly altered regex that cuts total code down a great deal.

function telephoneCheck(str) {
  let regex = /^1*\s*(?:[(]\d{3}[)]|\d{3}[-]|\d{3}\s|\d{3})\s*(?:\d{3}[-]|\d{3})\s*(?:\d{4})/;
  let regex2 = /[0-9]+/;
  let arr = str.split('');
  let filter = arr.filter(item => regex2.test(item));
  console.log(filter);
  if(filter.length >= 10 && filter.length < 12) {
    if(filter.length == 10) {
      return regex.test(str);
    } else if(filter.length == 11) {
      return str.charAt(0) !== "1" ? false : regex.test(str);
    }
  } else { 
    return false;
  }
}

console.log(telephoneCheck("1 555)555-5555"));


// Here is the updated regex. After viewing the solutions, I realized I was missing a '$' at the end of my regex.
// Essentially, that fixes any underlying issues I had that required all the extra filtering and code due to str.length issues.
// I was surprised at how similar my regex was to the actual given solution. I guess that is something to be proud of.

function telephoneCheck(str) {
  let regex = /^1*\s*(?:[(]\d{3}[)]|\d{3}[-]|\d{3}\s|\d{3})\s*(?:\d{3}[-]|\d{3})\s*(?:\d{4})$/;
  return regex.test(str);
}

console.log(telephoneCheck("1 555)555-5555"));
